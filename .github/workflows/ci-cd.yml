name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Add permissions for security scanning
permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test and Build Frontend
  test-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./webrtc-client
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './webrtc-client/package-lock.json'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run tests (if available)
      run: npm test --if-present
    
    - name: Build application
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: ./webrtc-client/dist

  # Test and Build Backend
  test-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./webrtc-signaling-server
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './webrtc-signaling-server/package-lock.json'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting (if available)
      run: npm run lint --if-present
    
    - name: Run tests (if available)
      run: npm test --if-present
    
    - name: Security audit
      run: npm audit --audit-level=moderate

  # Build and Push Docker Images
  build-and-push:
    needs: [test-frontend, test-backend]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set lowercase repository name
      run: |
        echo "LOWERCASE_REPO=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
        echo "Repository name converted to: $LOWERCASE_REPO"
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Debug registry info
      run: |
        echo "Registry: ${{ env.REGISTRY }}"
        echo "Username: ${{ github.actor }}"
        echo "Repository: ${{ env.LOWERCASE_REPO }}"
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.LOWERCASE_REPO }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    # Build and push Frontend image
    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./webrtc-client
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.LOWERCASE_REPO }}-frontend:${{ steps.meta.outputs.version }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          GIT_BRANCH=${{ github.ref_name }}
          GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}

    # Build and push Backend image
    - name: Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: ./webrtc-signaling-server
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.LOWERCASE_REPO }}-backend:${{ steps.meta.outputs.version }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          GIT_BRANCH=${{ github.ref_name }}
          GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}

    # Build and push Nginx image
#    - name: Build and push Nginx image
#      uses: docker/build-push-action@v5
#      with:
#        context: .
#        file: ./nginx.Dockerfile
#        push: true
#        tags: ${{ env.REGISTRY }}/${{ env.LOWERCASE_REPO }}-nginx:${{ steps.meta.outputs.version }}
#        labels: ${{ steps.meta.outputs.labels }}
#        cache-from: type=gha
#        cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || (github.ref == 'refs/heads/main' && github.event_name == 'push')
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging server
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: SSH to staging server and pull new images
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # Add smoke test commands here

  # Deploy to Production
  deploy-production:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production server
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
    
    - name: Run health checks
      run: |
        echo "Running health checks..."
        # Add health check commands here
    
    - name: Notify deployment
      run: |
        echo "Production deployment completed successfully!"
        # Add notification commands (Slack, email, etc.)

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    permissions:
      contents: read
      security-events: write
      actions: read
      pull-requests: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
    
    - name: Check if SARIF file exists
      run: |
        if [ -f "trivy-results.sarif" ]; then
          echo "SARIF file found, proceeding with upload"
          ls -la trivy-results.sarif
        else
          echo "No SARIF file found, skipping upload"
          exit 0
        fi
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

  # Performance Testing
  performance-test:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || (github.ref == 'refs/heads/main' && github.event_name == 'push')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run performance tests
      run: |
        echo "Running performance tests..."
        # Add performance testing commands here
        # Example: npm run test:performance 
